{"code": "15-411", "name": "Compiler Design", "base_name": "Compiler Design", "units": 15.0, "min_units": 15.0, "max_units": 15.0, "short_name": "COMPILER DESIGN", "is_topic": false, "topic": null, "prereqs": {"text": "15-213 [] at least C", "req_obj": {"id": 7946510, "screen_name": "glozpsc679ce257", "original_min_units": null, "min_units": null, "is_shared": false, "is_uni_req": false, "is_concentration": false, "default_concentration": false, "choices": [{"id": 3114, "screen_name": "15-213", "constraints": [{"type": "course", "type_string": "", "data": {"course": {"code": "15-213", "id": 3113, "name": "Introduction to Computer Systems", "units": 12.0}}, "id": 3113, "is_hidden": false}], "course_parent_id": "79465100000000003114"}], "constraints": [{"type": "anyxof", "type_string": "Fulfill all of the following requirements", "data": {"x": 1, "is_and": true}, "id": 11002084, "is_hidden": false}, {"type": "mingrade", "type_string": "Minimum grade of C", "data": {"grade": "C", "only_transfer_status": false, "only_non_transfer_status": false}, "id": 11002085, "is_hidden": false}]}, "raw_pre_req": ""}, "offered_in_campuses": [1], "offerings": [{"campus_id": 1, "semesters": [{"semester": 1, "year": 2020}, {"semester": 1, "year": 2021}, {"semester": 2, "year": 2023}, {"semester": 2, "year": 2024}, {"semester": 2, "year": 2025}], "sub_semesters": []}], "co_reqs": [], "anti_reqs": [], "equiv": [], "long_desc": "This course covers the design and implementation of compiler and runtime systems for highlevel languages, and examines the interaction between language design, compiler design, and runtime organization. Topics covered include syntactic and lexical analysis, handling of userdefined types and typechecking, context analysis, code generation and optimization, and memory management and runtime organization.", "student_sets": [{"id": 896, "name": "undergraduate"}], "offering_tags": [{"name": "specific_sem", "type": "INFO", "sem": 2}], "website": "https://www.cs.cmu.edu/~411/", "instructors": [], "is_repeatable": false, "is_req_repeatable": false, "repeat_limit_attempts": null, "repeat_limit_credits": null, "catalog_levels": [], "skills": [{"name": "Level Design", "slug": "level-design", "id": 1538}], "attributes": [], "custom_fields": {"goals": "Distinguish the main phases of a stateoftheart compiler Understand static and dynamic semantics of an imperative language Develop parsers and lexers using parser generators and combinators Perform semantic analysis Translate abstract syntax trees to intermediate representations and static single assignment form Analyze the dataflow in an imperative language Perform standard compiler optimizations Generate efficient assembly code for a modern architecture Allocate registers using a graphcoloring algorithm Understand opportunities and limitations of compiler optimizations Appreciate design tradeoffs how representation affects optimizations Automatically manage memory using garbage collection Develop complex software following highlevel specifications", "key_topics": "structure of a compiler; static and dynamic semantics; compiler correctness; parsing and lexing; semantic analysis; code generation; static single assignment form; dataflow analysis; compiler optimizations; assembly code; register allocation; intermediate representations; automatic memory management", "prerequisite_knowledge": "Students are expected to have significant experience in a high-level programming language.", "assessment_structure": "set of homework assignments: 30%; labs: 70%", "relevance": "15-411 Lecture 2 Section R is reserved for students who are unable to register for an in-person section due to a government visa/travel restriction or a documented medical condition. Enrollment in this section will require university-level approval. Register for an in-person section unless you are absolutely certain when you register that you will not be able to attend in-person this Fall.", "learning_resources": "Github; Piazza; Optional text", "extra_time_commitment": null}, "admin_context": {"suggested_by_advisor": null, "counts_for": []}, "success": true}
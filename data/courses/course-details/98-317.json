{"code": "98-317", "name": "Student Taught Courses (StuCo): Hype for Types", "base_name": "Student Taught Courses (StuCo): Hype for Types", "units": 3.0, "min_units": 3.0, "max_units": 3.0, "short_name": "STUCO: TYPE THEORY", "is_topic": false, "topic": null, "prereqs": {"text": "", "req_obj": null, "raw_pre_req": ""}, "offered_in_campuses": [1], "offerings": [{"campus_id": 1, "semesters": [{"semester": 2, "year": 2023}, {"semester": 1, "year": 2023}, {"semester": 2, "year": 2024}, {"semester": 1, "year": 2024}, {"semester": 2, "year": 2025}], "sub_semesters": []}], "co_reqs": [], "anti_reqs": [], "equiv": [], "long_desc": "Type theory is a foundation of mathematics that can serve as an alternative to set theory. It is integral to programming languages, which rely on type systems to ensure code correctness. This course aims to go over fun and weird results in type theory that you might otherwise have to read complicated academic papers to understand, as well as to provide a foundation to help understand these fun results. Well provide plain English explanations of concepts such as algebraic datatypes, derivatives of types, negative types, type isomorphisms, and the CurryHoward correspondence. Some math and programming background around the level of 15150 is required, though a type theory background is not necessary.", "student_sets": [{"id": 896, "name": "undergraduate"}], "offering_tags": [{"name": "specific_sem", "type": "INFO", "sem": 1}, {"name": "specific_sem", "type": "INFO", "sem": 2}], "website": null, "instructors": [], "is_repeatable": false, "is_req_repeatable": false, "repeat_limit_attempts": null, "repeat_limit_credits": null, "catalog_levels": [], "skills": [], "attributes": [], "custom_fields": {"goals": "Students will leave the course having done exercises in a wide variety of typetheoretic settings, including refactoring code using gradeschool algebra, writing simple programs in a linear type system similar to the new, popular Rust language, and verifying logical theorems by writing simple programs.", "key_topics": "Type theory, programming language theory, lambda calculus, data types, constructive/classical/linear logic, category theory, dependent types.", "prerequisite_knowledge": "This course is aimed at students with a basic knowledge of functional programming, such as experience in Standard ML, OCaml, or Haskell. Having taken 15-150 is more than sufficient. We will often use Standard ML in lectures and on homework assignments.", "assessment_structure": "Students will be assessed based on weekly homework assignments, each of which will provide simple exercises based on the topics covered in lecture. Students will be expected to put in at least a \"good-faith effort\" into each homework, demonstrating a reasonable understanding of the material.", "relevance": "Hype for Types teaches students fun theoretical results and practical tricks for use in programming languages! Students will leave the course with a deeper understanding of a broad collection of cutting-edge topics in the field of type theory and programming languages.", "learning_resources": "Our course web page will include custom notes, slides, and code written by the instructors. Additionally, we will link to approachable research papers in the field when applicable.", "extra_time_commitment": "It is required that students put in at least a \"good-faith effort\" into the weekly homework assignments, which involves at least a 30-60m attempt."}, "grade_option": {"name": "Pass/Fail", "short_name": "P", "never_graded": false, "is_pass_fail": true, "is_audit": false, "id": 4}, "admin_context": {"suggested_by_advisor": null, "counts_for": []}, "success": true}
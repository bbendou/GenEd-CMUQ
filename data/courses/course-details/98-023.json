{"code": "98-023", "name": "Student Taught Courses (StuCo):Start Playing with Competitive Programming Gently", "base_name": "Student Taught Courses (StuCo):Start Playing with Competitive Programming Gently", "units": 3.0, "min_units": 3.0, "max_units": 3.0, "short_name": "STUCO COMPETITIV PRG", "is_topic": false, "topic": null, "prereqs": {"text": "", "req_obj": null, "raw_pre_req": ""}, "offered_in_campuses": [2], "offerings": [{"campus_id": 2, "semesters": [{"semester": 1, "year": 2022}], "sub_semesters": []}], "co_reqs": [], "anti_reqs": [], "equiv": [], "long_desc": "Competitive programming CP is commonly referred to as a mind sport like chess, puzzles, etc. that requires participants to give solutions to specific problems under certain constraints and allotted time. It is useful because it not only helps players improve their problem solving ability and coding skills but also opens many career opportunities as big companies such as Google, Microsoft, etc. pay close attention to the CP community and recruit top players. Amazing as it is, however, getting started with the field can be difficult. Although Carnegie Mellon University currently offers two courses to introduce students to CP  15195 and 15295, These courses concentrate intensively on the most common algorithms and introducing theoretical concepts but overlook more practical aspects  useful tricks, good implementation style, etc. Therefore, we propose a StuCo course to fill in this gap.", "student_sets": [{"id": 896, "name": "undergraduate"}], "offering_tags": [{"name": "specific_sem", "type": "INFO", "sem": 2}], "website": null, "instructors": [], "is_repeatable": false, "is_req_repeatable": false, "repeat_limit_attempts": null, "repeat_limit_credits": null, "catalog_levels": [], "skills": [], "attributes": [], "custom_fields": {"goals": "By the end of the course, students will be able to Use the C programming language to implement their solutions for problems Understand topics and techniques widely used in competitive programming that are within the scope of the course Apply introduced topics and techniques to develop solutions for problems during competitions", "key_topics": "Binary and ternary search and their applications; -Stacks, queues, deques and techniques involving them; Prime sieves; -Greedy method of solving problems; Disjoint set union and small-to-large; Segment tree and prefix sum method; Mo's algorithm; Binary jumping and its application in different settings; Various utilities of the C++ standard template library, including IO, various template algorithms, and data structures.", "prerequisite_knowledge": "The course is designed with the assumption that students have some exposure to algorithms and data structures - more specifically, have a fundamental understanding of the content of 15-122.", "assessment_structure": "Homework and Exams", "relevance": "The purpose of this course is to introduce in a practical and contextual manner topics of CP that both appear frequently in programming competitions and are based on familiar concepts that students (especially Computer Science majors) are exposed to during university courses. We will achieve this by revisiting some course content and extending the discussion towards applications in programming competitions. There are some overlapping topics with other courses but in this course, we will discuss in a more competition-oriented lens.", "learning_resources": "A computer that is enough to run Code::Blocks IDE, G++ compiler, and GDB debugger. Installation details will be mentioned in the course.", "extra_time_commitment": "Besides lectures, students are expected to spend 1 hour a week on homework assignments"}, "grade_option": {"name": "Pass/Fail", "short_name": "P", "never_graded": false, "is_pass_fail": true, "is_audit": false, "id": 4}, "admin_context": {"suggested_by_advisor": null, "counts_for": []}, "success": true}
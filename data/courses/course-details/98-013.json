{"code": "98-013", "name": "Student Taught Courses (StuCo): Lean: A Practical Introduction", "base_name": "Student Taught Courses (StuCo): Lean: A Practical Introduction", "units": 3.0, "min_units": 3.0, "max_units": 3.0, "short_name": "STUCO: LEAN PRACTCAL", "is_topic": false, "topic": null, "prereqs": {"text": "", "req_obj": null, "raw_pre_req": ""}, "offered_in_campuses": [1], "offerings": [{"campus_id": 1, "semesters": [{"semester": 2, "year": 2022}, {"semester": 1, "year": 2022}], "sub_semesters": []}], "co_reqs": [], "anti_reqs": [], "equiv": [], "long_desc": "Lean is a general purpose theorem prover, proof assistant, and dependently typed programming language that has rapidly grown in popularity in the last few years, with its standard library doubling in size in the last year alone. This course will give students hands on experience formalizing math in Lean. We will work through a number of projects to learn about the tools Lean has to offer, in a lowpressure, collaborative environment. By the end, hopefully everyone will be working on formalizing a theorem that hasnt yet been formalized in Lean", "student_sets": [{"id": 896, "name": "undergraduate"}], "offering_tags": [{"name": "specific_sem", "type": "INFO", "sem": 1}, {"name": "specific_sem", "type": "INFO", "sem": 2}], "website": "http://www.cmu.edu/stuco/", "instructors": [], "is_repeatable": false, "is_req_repeatable": false, "repeat_limit_attempts": null, "repeat_limit_credits": null, "catalog_levels": [], "skills": [], "attributes": [], "custom_fields": {"goals": "Basic understanding of dependent type theory. Strong understanding of Leans brand of formalization, centered on the calculus of inductive constructions. Ability to parse Lean 3 code and understand existing Lean formalizations. Familiarity with language tools like typeclasses and elaboration familiarity with common proof strategies and tactics. Experience with the tools used to develop in Lean, including interactive theorem proving. Knowledge of how to use and contribute to mathlib. Ability to communicate math formalisms in multiple formats Lean code, written proposals, and presentations.", "key_topics": "Formal mathematics, dependent types, Lean Prover", "prerequisite_knowledge": "Experience with formal proofs from at least one math/CS course (e.g. any course with 127/128/151 as a prerequisite). 15-150 or equivalent experience with functional programming.", "assessment_structure": "Small assignments and a final project, all graded for effort.", "relevance": "For those going into math or computer science theory, computer-verifiable formalization is the gold standard for thoroughly convincing proofs. This course provides experience using a proof assistant to develop computer-verifiable proofs in any area of interest. For those interested in software verification, the course will also discuss how to use Lean to write code AND verify its correctness, in the same language of dependent types.", "learning_resources": "There are a number of textbooks that approach Lean from different directions, one of which we will use as a general reference. Lean also has a very active support group online which can provide help as needed.", "extra_time_commitment": "Expectation of ~1hr work each week outside of class."}, "grade_option": {"name": "Pass/Fail", "short_name": "P", "never_graded": false, "is_pass_fail": true, "is_audit": false, "id": 4}, "admin_context": {"suggested_by_advisor": null, "counts_for": []}, "success": true}
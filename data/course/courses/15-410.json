{"code": "15-410", "name": "Operating System Design and Implementation", "base_name": "Operating System Design and Implementation", "units": 15.0, "min_units": 15.0, "max_units": 15.0, "short_name": "OP SYS DESIGN & IMPL", "is_topic": false, "topic": null, "prereqs": {"text": "", "req_obj": null, "raw_pre_req": ""}, "offered_in_campuses": [1], "offerings": [{"campus_id": 10, "semesters": [], "sub_semesters": []}, {"campus_id": 2, "semesters": [], "sub_semesters": []}, {"campus_id": 11, "semesters": [], "sub_semesters": []}, {"campus_id": 9, "semesters": [], "sub_semesters": []}, {"campus_id": 14, "semesters": [], "sub_semesters": []}, {"campus_id": 13, "semesters": [], "sub_semesters": []}, {"campus_id": 15, "semesters": [], "sub_semesters": []}, {"campus_id": 16, "semesters": [], "sub_semesters": []}, {"campus_id": 17, "semesters": [], "sub_semesters": []}, {"campus_id": 1, "semesters": [{"semester": 1, "year": 2022}, {"semester": 2, "year": 2023}, {"semester": 1, "year": 2023}, {"semester": 2, "year": 2024}, {"semester": 1, "year": 2024}], "sub_semesters": []}, {"campus_id": 18, "semesters": [], "sub_semesters": []}, {"campus_id": 19, "semesters": [], "sub_semesters": []}, {"campus_id": 12, "semesters": [], "sub_semesters": []}, {"campus_id": 8, "semesters": [], "sub_semesters": []}], "co_reqs": [], "anti_reqs": [{"code": "14-712", "id": 9912, "name": "Operating Systems", "units": 12.0}], "equiv": [], "long_desc": "Operating System Design and Implementation is a rigorous handson introduction to the principles and practice of operating systems. The core experience is writing a small Unixinspired OS kernel, in C with some x86 assembly language, which runs on a PC hardware simulator and on actual PC hardware if you wish.  Work is done in twoperson teams, and team programming skills source control, modularity, documentation are emphasized.  The size and scope of the programming assignments typically result in students significantly developing their design, implementation, and debugging abilities. Core concepts include the process model, virtual memory, threads, synchronization, and deadlock the course also surveys higherlevel OS topics including file systems, interprocess communication, networking, and security.  Students, especially graduate students, who have not satisfied the prerequisite at Carnegie Mellon are strongly cautioned  to enter the class you must be able to write a storage allocator in C, use a debugger, understand 2scomplement arithmetic, and translate between C and x86 assembly language.  The instructor may require you to complete a skills assessment exercise before the first week of the semester in order to remain registered in the class.  Auditing  this course is usually full, and we generally receive many more requests to audit than we can accept.  If you wish to audit, please have your advisor contact us before the semester begins to discuss your educational goals.", "student_sets": [{"id": 896, "name": "undergraduate"}], "offering_tags": [{"name": "specific_sem", "type": "INFO", "sem": 1}, {"name": "specific_sem", "type": "INFO", "sem": 2}], "website": "https://www.csd.cs.cmu.edu/course-profiles/15-410_605-Operating-System-Design-and-Implementation", "instructors": [], "is_repeatable": false, "is_req_repeatable": false, "repeat_limit_attempts": null, "repeat_limit_credits": null, "catalog_levels": [], "skills": [{"name": "Audition", "slug": "audition", "id": 1629}, {"name": "Audit", "slug": "audit", "id": 1866}], "attributes": [], "custom_fields": {"goals": "Synthesize into a considered design Compare and contrast the properties of memory regions according to the Unix process model Compare and contrast the properties and roles of x8632 registers Explain the interactions of inputoutput operations and perthread scheduling states Implement address spaces, including TLB managementExplain why and how multiple threads are used in a single address space Analyze and write lockbased multithreaded code and lock objects, including detecting and documenting race conditions and deadlock Explain the relationship between interrupts and other forms of concurrency Use multiple tools and approaches to debug concurrencyrelated code failures Write robust code that responds appropriately to resource exhaustionWrite clear, appropriately documented code Define and illustrate key computer security concepts such as protection domains, capabilities, access control lists, and leastprivilege execution Define, illustrate, and apply, in a basic fashion, key computer security technologies such as secure hashes, symmetric cipers, and asymmetric ciphers Describe and illustrate key elements of higherlevel operating systems features such as file systems, interprocess communication, realtime scheduling, disk arrays, and logbased storage Study an OSrelated topic via a mediumsized nontextbook technical reading assignment and report in writing on what was learned.", "key_topics": "Process model; virtual memory; concurrency, threads, locking, interrupts, preemptibility, race conditions; design synthesis; design for robustness; introductory understanding of typical OS topics (file systems, transactions, scheduling, security concepts and technologies, memory consistency)Parallel programming models / frameworks", "prerequisite_knowledge": "Strong grasp of all concepts and techniques covered in 15-213/513, especially: C run-time model, translating between C and assembly language, ability to write complicated pointer-based code.", "assessment_structure": "Programming Projects: 55%; Midterm exam: 15%; Final exam: 20%; Homework and Book Report: 10%", "relevance": "For strong, confident Systems students who want to understand every detail of a small OS kernel by: solving hard design problems; implementing a kernel from scratch; debugging challenging run-time model violations due to concurrency mistakes; and being graded rigorously based on code quality. Students should expect to devote the time and focus required to, at the end of the semester, be able to confidently debug complex problems which they would not have been able to describe at the start of the semester.", "learning_resources": "Lecture material; Hardware documentation; Specification documents; Textbook", "extra_time_commitment": "A three-hour evening exam will occur in one of the two weeks before mid-semester grades are due. Students should not schedule travel during those weeks before the exact date and time are announced.\n\nThis course 15-410 is for undergraduates. Graduate students should enroll in 15-605."}, "admin_context": {"suggested_by_advisor": null, "counts_for": []}, "success": true}
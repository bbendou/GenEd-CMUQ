{"code": "15-314", "name": "Programming Language Semantics", "base_name": "Programming Language Semantics", "units": 12.0, "min_units": 12.0, "max_units": 12.0, "short_name": "PRG LNG SEMANTICS", "is_topic": false, "topic": null, "prereqs": {"text": "", "req_obj": null, "raw_pre_req": ""}, "offered_in_campuses": [1], "offerings": [{"campus_id": 10, "semesters": [], "sub_semesters": []}, {"campus_id": 2, "semesters": [], "sub_semesters": []}, {"campus_id": 11, "semesters": [], "sub_semesters": []}, {"campus_id": 9, "semesters": [], "sub_semesters": []}, {"campus_id": 14, "semesters": [], "sub_semesters": []}, {"campus_id": 13, "semesters": [], "sub_semesters": []}, {"campus_id": 15, "semesters": [], "sub_semesters": []}, {"campus_id": 16, "semesters": [], "sub_semesters": []}, {"campus_id": 17, "semesters": [], "sub_semesters": []}, {"campus_id": 1, "semesters": [{"semester": 2, "year": 2020}, {"semester": 2, "year": 2021}, {"semester": 2, "year": 2022}, {"semester": 2, "year": 2023}, {"semester": 2, "year": 2024}], "sub_semesters": []}, {"campus_id": 18, "semesters": [], "sub_semesters": []}, {"campus_id": 19, "semesters": [], "sub_semesters": []}, {"campus_id": 12, "semesters": [], "sub_semesters": []}, {"campus_id": 8, "semesters": [], "sub_semesters": []}], "co_reqs": [], "anti_reqs": [], "equiv": [], "long_desc": "This lecture course introduces the foundational concepts and techniques of programming language semantics. The aim is to demonstrate the utility of a scientific approach, based on mathematics and logic, with applications to program analysis, language design, and compiler correctness. We focus on the most widely applicable frameworks for semantic description denotational, operational, and axiomatic semantics. We use semantics to analyze program behavior, guide the development of correct programs, prove correctness of a compiler, validate logics for program correctness, and derive general laws of program equivalence. We will discuss imperative and functional languages, sequential and parallel, as time permits.", "student_sets": [{"id": 896, "name": "undergraduate"}], "offering_tags": [{"name": "specific_sem", "type": "INFO", "sem": 2}], "website": null, "instructors": [], "is_repeatable": false, "is_req_repeatable": false, "repeat_limit_attempts": null, "repeat_limit_credits": null, "catalog_levels": [], "skills": [{"name": "Abstract Mathematics", "slug": "abstract-mathematics", "id": 252}, {"name": "Programming", "slug": "programming", "id": 329}], "attributes": [], "custom_fields": {"goals": null, "key_topics": "1.\tThe denotational and operational styles of semantic description; criteria for choosing models: behavioral equivalence, compositionality, adequacy, full abstraction. A language of arithmetic expressions.\n2.\tSequential while-programs: direct- and continuation-style semantics. Partial and total correctness. Axiomatic semantics: Hoare logic and incorrectness logic. Declarations and scope.\n3.\tMachine code: continuation semantics. Foundations: Scott domains, continuity and least fixed-points. A compiler for imperative programs; compiler correctness and code optimizations. Axiomatic semantics: a Hoare logic for machine code\n4.\tSequential pointer-programs. Abstract models of store and heap. Denotational and operational semantics. Separation logic.\n5.\tConcurrency: shared memory models; fair execution; race conditions; safety and liveness; concurrent separation logic\n6.\tFunctional programs: types and polymorphism; call-by-value evaluation; denotational and operational semantics; progress and preservation", "prerequisite_knowledge": null, "assessment_structure": "Grading is based on homeworks and a (take-home) final exam. Students are encouraged to form study groups, but each student must do homework and exams individually.\nAll classes will be delivered using zoom.", "relevance": "This course is designed for advanced undergraduates with interests in the mathematical and logical foundations of programming languages.", "learning_resources": "Lecture notes and slides will be posted to canvas during the course. The following texts are suggested for optional additional reading, but they use different notation and do not cover all class material:\n1.\tReynolds, Theories of Programming Languages, Cambridge University Press, ISBN 0-521-59414-6.\n2.\tWinskel, The Formal Semantics of Programming Languages: An Intro- duction, MIT Press, ISBN 0-262-23169-7.", "extra_time_commitment": null}, "admin_context": {"suggested_by_advisor": null, "counts_for": []}, "success": true}
{"code": "17-355", "name": "Program Analysis", "base_name": "Program Analysis", "units": 12.0, "min_units": 12.0, "max_units": 12.0, "short_name": "PROGRAM ANALYSIS", "is_topic": false, "topic": null, "prereqs": {"text": "", "req_obj": null, "raw_pre_req": ""}, "offered_in_campuses": [1], "offerings": [{"campus_id": 10, "semesters": [], "sub_semesters": []}, {"campus_id": 2, "semesters": [], "sub_semesters": []}, {"campus_id": 11, "semesters": [], "sub_semesters": []}, {"campus_id": 9, "semesters": [], "sub_semesters": []}, {"campus_id": 14, "semesters": [], "sub_semesters": []}, {"campus_id": 13, "semesters": [], "sub_semesters": []}, {"campus_id": 15, "semesters": [], "sub_semesters": []}, {"campus_id": 16, "semesters": [], "sub_semesters": []}, {"campus_id": 17, "semesters": [], "sub_semesters": []}, {"campus_id": 1, "semesters": [{"semester": 2, "year": 2020}, {"semester": 2, "year": 2021}, {"semester": 2, "year": 2022}, {"semester": 2, "year": 2023}, {"semester": 1, "year": 2024}], "sub_semesters": []}, {"campus_id": 18, "semesters": [], "sub_semesters": []}, {"campus_id": 19, "semesters": [], "sub_semesters": []}, {"campus_id": 12, "semesters": [], "sub_semesters": []}, {"campus_id": 8, "semesters": [], "sub_semesters": []}], "co_reqs": [], "anti_reqs": [], "equiv": [], "long_desc": "This course covers both foundations and practical aspects of the automated analysis of programs, which is becoming increasingly critical to find software errors and assure program correctness. The theory of abstract interpretation captures the essence of a broad range of program analyses and supports reasoning about their correctness. Building on this foundation, the course will describe program representations, data flow analysis, alias analysis, interprocedural analysis, dynamic analysis, Hoare Logic and verification, program synthesis and repair, model checking, and symbolic execution. Through assignments and projects, students will design and implement practical analysis tools that find bugs and verify properties of software. This course satisfies the Logic and Languages constrained elective category of the Computer Science major, the Theoretical Foundations requirement of the Computer Science masters degree, and the Technical Software Engineering requirement for the Software Engineering minor.", "student_sets": [{"id": 896, "name": "undergraduate"}], "offering_tags": [{"name": "specific_sem", "type": "INFO", "sem": 1}, {"name": "specific_sem", "type": "INFO", "sem": 2}], "website": "https://cmu-program-analysis.github.io/", "instructors": [], "is_repeatable": false, "is_req_repeatable": false, "repeat_limit_attempts": null, "repeat_limit_credits": null, "catalog_levels": [], "skills": [{"name": "Automation", "slug": "automation", "id": 22}, {"name": "Analysis", "slug": "analysis", "id": 260}, {"name": "Executable Analysis", "slug": "executable-analysis", "id": 333}], "attributes": [], "custom_fields": {"goals": "Students will gain a theoretical and practical understanding of program analysis and the ability to apply it to realworld problems", "key_topics": "This course covers both foundations and practical aspects of the automated analysis of programs, including applications to finding software errors and assuring program correctness.", "prerequisite_knowledge": "mathematical maturity; familiarity with higher-order OO or functional programming", "assessment_structure": "There will be assignments, a midterm, a final project, and in-class exercises", "relevance": "Students will learn to design, implement, and apply analysis techniques that find bugs and verify programs", "learning_resources": "Course notes as well as a supplementary textbook, Principles of Program Analysis", "extra_time_commitment": null}, "admin_context": {"suggested_by_advisor": null, "counts_for": []}, "success": true}
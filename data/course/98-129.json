{"code": "98-129", "name": "Student Taught Courses (StuCo): Principles of Dysfunctional Programming", "base_name": "Student Taught Courses (StuCo): Principles of Dysfunctional Programming", "units": 3.0, "min_units": 3.0, "max_units": 3.0, "short_name": "STUCO: PRIN DYS PYMG", "is_topic": false, "topic": null, "prereqs": {"text": "", "req_obj": null, "raw_pre_req": ""}, "offered_in_campuses": [1], "offerings": [{"campus_id": 10, "semesters": [], "sub_semesters": []}, {"campus_id": 2, "semesters": [], "sub_semesters": []}, {"campus_id": 11, "semesters": [], "sub_semesters": []}, {"campus_id": 9, "semesters": [], "sub_semesters": []}, {"campus_id": 14, "semesters": [], "sub_semesters": []}, {"campus_id": 13, "semesters": [], "sub_semesters": []}, {"campus_id": 15, "semesters": [], "sub_semesters": []}, {"campus_id": 16, "semesters": [], "sub_semesters": []}, {"campus_id": 17, "semesters": [], "sub_semesters": []}, {"campus_id": 1, "semesters": [{"semester": 1, "year": 2022}], "sub_semesters": []}, {"campus_id": 18, "semesters": [], "sub_semesters": []}, {"campus_id": 19, "semesters": [], "sub_semesters": []}, {"campus_id": 12, "semesters": [], "sub_semesters": []}, {"campus_id": 8, "semesters": [], "sub_semesters": []}], "co_reqs": [], "anti_reqs": [], "equiv": [], "long_desc": "For much of our lives, were put under pressure to do things quickly. In life, we often feel that we always have to be both effective and efficient. In this course, we offer an alternative approach to programming, where we give ourselves time to stop and smell the roses. Instead of chugging cups and cups of coffee to help us write efficient algorithms, we will instead write wonderfully inefficient algorithms which will allow us to code first, and then have a nice tea break while our algorithm continues to calmly perform its assigned tasks until the heat death of the universe. Welcome to Dysfunctional Programming, where we will take a leisurely stroll to explore pessimal algorithms with some concepts of computational complexity, some theory of computation, some programming techniques, and some math Knowledge of programming will be generally helpful to take this course, but this course will attempt to be fairly beginnerfriendly. To that end, little theoretical computer science knowledge is needed coming into this course, though skill in writing proofs may be useful.", "student_sets": [{"id": 896, "name": "undergraduate"}], "offering_tags": [{"name": "specific_sem", "type": "INFO", "sem": 1}, {"name": "specific_sem", "type": "INFO", "sem": 2}], "website": null, "instructors": [], "is_repeatable": false, "is_req_repeatable": false, "repeat_limit_attempts": null, "repeat_limit_credits": null, "catalog_levels": [], "skills": [], "attributes": [], "custom_fields": {"goals": "Students will be able to recognize efficient algorithms from inefficient algorithms at a glance and describe how they work, and students will be able to justify the correctness of their own algorithms with proof Its incredibly important to be able to know, with 100 certainty, that your process works and you can analyze it.", "key_topics": "Complexity and simplexity, recursion and computation theory, recognizing pessimality and optimality, pessimal algorithms with particular applications in sorting, limits of dysfunctional programming.", "prerequisite_knowledge": "None, though having prior programming experience of any kind is encouraged. That being said, this course will do its very best to remain beginner-friendly. Homework will be graded on effort, not correctness. Furthermore, typically if a programming question is on homework, there will also be a proof question where you can simply choose one or the other to do.", "assessment_structure": "Homework: Eight homework assignments graded pass/fail; only four need to be completed to pass the homework requirement.\nMidterm: The midterm examination will be short and graded on completion. It's mainly for us instructors to gauge how the students are understanding the material in general \u00bf the midterm comments are how we give midsemester feedback.\nFinal: Students will design (and analyze) their own pessimal algorithm to solve some task or give a presentation on one that already exists.", "relevance": "One can only write efficient code by understanding how to be inefficient. This course will give students the opportunity to learn proofs and concepts such as complexity in a relatively low-stakes, chill environment.", "learning_resources": "All resources necessary will be provided.", "extra_time_commitment": "Homework will be assigned weekly, and the final project spans several weeks."}, "grade_option": {"name": "Pass/Fail", "short_name": "P", "never_graded": false, "is_pass_fail": true, "is_audit": false, "id": 4}, "admin_context": {"suggested_by_advisor": null, "counts_for": []}, "success": true}
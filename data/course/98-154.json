{"code": "98-154", "name": "Student Taught Courses (StuCo): Intro to Open-Source FPGA & ASIC Chip Design", "base_name": "Student Taught Courses (StuCo): Intro to Open-Source FPGA & ASIC Chip Design", "units": 3.0, "min_units": 3.0, "max_units": 3.0, "short_name": "STUCO: OPEN CHIP DES", "is_topic": false, "topic": null, "prereqs": {"text": "", "req_obj": null, "raw_pre_req": ""}, "offered_in_campuses": [1], "offerings": [{"campus_id": 10, "semesters": [], "sub_semesters": []}, {"campus_id": 2, "semesters": [], "sub_semesters": []}, {"campus_id": 11, "semesters": [], "sub_semesters": []}, {"campus_id": 9, "semesters": [], "sub_semesters": []}, {"campus_id": 14, "semesters": [], "sub_semesters": []}, {"campus_id": 13, "semesters": [], "sub_semesters": []}, {"campus_id": 15, "semesters": [], "sub_semesters": []}, {"campus_id": 16, "semesters": [], "sub_semesters": []}, {"campus_id": 17, "semesters": [], "sub_semesters": []}, {"campus_id": 1, "semesters": [{"semester": 1, "year": 2022}, {"semester": 2, "year": 2023}, {"semester": 1, "year": 2023}], "sub_semesters": []}, {"campus_id": 18, "semesters": [], "sub_semesters": []}, {"campus_id": 19, "semesters": [], "sub_semesters": []}, {"campus_id": 12, "semesters": [], "sub_semesters": []}, {"campus_id": 8, "semesters": [], "sub_semesters": []}], "co_reqs": [], "anti_reqs": [], "equiv": [], "long_desc": "There has recently been a massive growth in free, opensource hardwaredesign technologies. It is now possible to use modern methodologies many of which are taken directly from software engineering to make hardware design much easier and cheaper, and the industry at large is starting to adopt these technologies in widespread use. Modern opensource hardwaredesign tools are free, fast, dont require NDAs, and are a joy to use. This course aims to provide an overview of how these tools work and how to use them  everything from FPGA synthesis Yosys and NextPNR, to simulation and verification Verilator and CocoTB, which let you write testbenches in C or Python, to SoC and CPU generation, and even new hardwaredesign languages entirely which integrate modern ideas from functional and objectoriented programming.", "student_sets": [{"id": 896, "name": "undergraduate"}], "offering_tags": [{"name": "specific_sem", "type": "INFO", "sem": 1}, {"name": "specific_sem", "type": "INFO", "sem": 2}], "website": null, "instructors": [], "is_repeatable": false, "is_req_repeatable": false, "repeat_limit_attempts": null, "repeat_limit_credits": null, "catalog_levels": [], "skills": [], "attributes": [], "custom_fields": {"goals": "Students will be able to use fullyopensource FPGA tools Yosys, NextPNR to synthesize and implement a digital logic design onto an FPGA Students will understand how to use simulators such as CocoTB to use conventional programming language Python, C to write testbenches for their logic designs Students will become familiar with the realm of alternative HDLs such as Chisel and opensource SoC generators and how they fit alongside conventional HDLs and logic design Students will know how to use an opensource process node and digital layout flow to convert simple logic designs into fullymanufacturable integrated circuit designs", "key_topics": "- Open-source FPGA tools (Yosys, NextPNR) and how to use them to target FPGAs - How to use logic synthesizers for unique non-chip applications - Modern digital design-verification techniques (using tools like verilator and cocotb to write testbenches in a conventional programming language) - Alternative HDLs such as Amaranth (based on Python) and Chisel (based on Scala) and why they are so useful - Template-based automatic SoC generators like LiteX and Rocket-Chip - Formal verification and coverage testing (provides improved confidence in the correctness of your hardware) - How to synthesize logic onto an actual ASIC chip (using tools like OpenLane and the SKY130 PDK)", "prerequisite_knowledge": "Some knowledge of digital logic design (using Verilog or VHDL) would allow students to gain the most out of this course (there will be review materials provided during the first week of class for those who lack the relevant knowledge). Programming experience in one imperative software language (Python, C, Java, etc.) is also highly recommended.", "assessment_structure": "There will be assignments once every 2 weeks, based on the contents of that week's lecture. There will additionally be a final project where students implement a design (of their choice) using an open-source ASIC toolchain.", "relevance": "The world of software is already dominated by open-source (Linux, Git, Python, etc etc) and the hardware domain is being taken over by open-source tooling as well (older players like Synopsys, Cadence, Xilinx, Altera are slowly being pushed out). These tools are beginning to see widespread industry adoption, and a strong understanding of these tools will become very useful for working in the hardware-design industry in the future (as well as in academia, where open-source is even more prevalent already).", "learning_resources": "Course materials will include links to papers, open-source code repositories, and documentation for all the tools used in the course. In addition, example source code (upon which the homework assignments are based) will be provided for each topic through the course web page.", "extra_time_commitment": "Bi-weekly homework assignments will be provided. Each assignment will contain a required portion (intended to take roughly 1 hour) based on something that was demonstrated in lecture, along with an optional (self-guided) portion for those students who are particularly interested in the week's topic and want to learn about it in more depth. There will also be a final project which will replace the homeworks during the last few weeks of the course (with a similar time-commitment)."}, "grade_option": {"name": "Pass/Fail", "short_name": "P", "never_graded": false, "is_pass_fail": true, "is_audit": false, "id": 4}, "admin_context": {"suggested_by_advisor": null, "counts_for": []}, "success": true}